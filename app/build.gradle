apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-kapt"
static def releaseTime() {
    return new Date().format("yyyyMMdd")
}

android {
    signingConfigs {
        release {
            storeFile file('F:\\MVVMProject\\app\\shike.keystore')
            storePassword 'xifan520'
            keyAlias = 'xifan'
            keyPassword 'xifan520'
        }
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.cj.mvvmproject"
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFileName.endsWith('.apk')) {
                outputFileName = outputFileName.replace(".apk", "_v${defaultConfig.versionName}_${defaultConfig.versionCode}_${releaseTime()}.apk")
            }
        }
    }


    dataBinding {
        enabled = true
    }

    //每个业务都单独放
    sourceSets {
        //第一种方式:每新建一个单独业务文件夹都需要手动添加
//        main {
//            assets.srcDirs += [
//                    'src/business/bubble/assets'
//            ]
//            java.srcDirs += [
//                    'src/business/bubble/java'
//                    , 'src/business/node/java'
//                    , 'src/business/screen/java'
//                    , 'src/business/skin/java'
//                    , 'src/business/video/java'
//                    , 'src/business/net/java'
//                    , 'src/business/recyclerview/java'
//            ]
//
//            res.srcDirs += [
//                    'src/business/bubble/res'
//                    , 'src/business/node/res'
//                    , 'src/business/screen/res'
//                    , 'src/business/skin/res'
//                    , 'src/business/theme/green/res'
//                    , 'src/business/theme/red/res'
//                    , 'src/business/video/res'
//                    , 'src/business/net/res'
//                    , 'src/business/recyclerview/res'
//
//            ]
//        }

        //第二种:同步一下就可添加
        main {
            def assetsPaths = []
            def javaPaths = []
            def resPaths = []
            //每一行分别对应app目录下src的每个文件夹,需要在src下的哪个文件夹增加业务单独文件夹就写这行
            traversalSourceSet('business', assetsPaths, javaPaths, resPaths)
            assets.srcDirs += assetsPaths
            java.srcDirs += javaPaths
            res.srcDirs += resPaths
        }
    }
    compileOptions {
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }
}



def traversalSourceSet(String mainDirname, List assetsPaths, List javaPaths, List resPaths) {
    def mainDir = new File(projectDir, 'src/' + mainDirname)
    if (!mainDir.exists() || !mainDir.isDirectory()) return
    mainDir.eachFile { primaryDirFile ->
        traversalSourceSetPrimary(mainDirname, primaryDirFile, assetsPaths, javaPaths, resPaths)
    }
}

static def traversalSourceSetPrimary(String mainDirname, File primaryDirFile, List assetsPaths, List javaPaths, List resPaths) {
    if (!primaryDirFile.isDirectory()) return
    def primaryDirname = primaryDirFile.name
    primaryDirFile.eachFile { secondaryDirFile ->
        if (secondaryDirFile.isDirectory()) {
            def secondaryDirname = secondaryDirFile.name
            if (secondaryDirname == 'assets') {
                assetsPaths << 'src/' + mainDirname + '/' + primaryDirname + '/assets'
            } else if (secondaryDirname == 'java') {
                javaPaths << 'src/' + mainDirname + '/' + primaryDirname + '/java'
            } else if (secondaryDirname == 'res') {
                resPaths << 'src/' + mainDirname + '/' + primaryDirname + '/res'
            } else {
                traversalSourceSetSecondary(mainDirname, primaryDirname, secondaryDirFile, assetsPaths, javaPaths, resPaths)
            }
        }
    }
}

static def traversalSourceSetSecondary(String mainDirname, String primaryDirname, File secondaryDirFile, List assetsPaths, List javaPaths, List resPaths) {
    if (!secondaryDirFile.isDirectory()) return
    def secondaryDirname = secondaryDirFile.name
    secondaryDirFile.eachFile { tertiaryDirFile ->
        if (tertiaryDirFile.isDirectory()) {
            def tertiaryDirname = tertiaryDirFile.name
            if (tertiaryDirname == 'assets') {
                assetsPaths << 'src/' + mainDirname + '/' + primaryDirname + '/' + secondaryDirname + '/assets'
            } else if (tertiaryDirname == 'java') {
                javaPaths << 'src/' + mainDirname + '/' + primaryDirname + '/' + secondaryDirname + '/java'
            } else if (tertiaryDirname == 'res') {
                resPaths << 'src/' + mainDirname + '/' + primaryDirname + '/' + secondaryDirname + '/res'
            }
        }
    }
}

kapt {
    generateStubs = true
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    kapt "com.android.databinding:compiler:3.5.2"
    implementation project(':library')
    implementation project(':sdknet')
    implementation project(':videocompressor')
    //widget
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-rc01'

    //屏幕适配方案
    implementation 'me.jessyan:autosize:1.1.2'

    implementation 'com.sothree.slidinguppanel:library:3.4.0'
    implementation 'androidx.navigation:navigation-runtime:2.1.0'
    implementation 'com.lwjlol.navigation:keep-fragmentstate:0.0.1'
    implementation 'com.google.android.material:material:1.2.0-alpha01'
    implementation 'net.steamcrafted:materialiconlib:1.1.5'
    //compile "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    // 基本操作
    implementation 'com.facebook.stetho:stetho:1.5.1'
    // 网络操作--有网络操作添加
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    //刷新控件
    implementation  'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0'      //核心必须依赖

    //换肤
    implementation 'skin.support:skin-support:4.0.5'                   // skin-support
    implementation 'skin.support:skin-support-appcompat:4.0.5'         // skin-support 基础控件支持
    implementation 'skin.support:skin-support-design:4.0.5'            // skin-support-design material design 控件支持[可选]
    implementation 'skin.support:skin-support-cardview:4.0.5'          // skin-support-cardview CardView 控件支持[可选]
    implementation 'skin.support:skin-support-constraint-layout:4.0.5' // skin-support-constraint-layout ConstraintLayout 控件支持[可选]
}

repositories {
    mavenCentral()
}
